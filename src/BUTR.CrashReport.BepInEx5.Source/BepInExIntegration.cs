// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "BepInExIntegration.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BUTRCRASHREPORT_DISABLE
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.BepInEx5
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::BepInEx;
    using global::BepInEx.Bootstrap;
    using global::BUTR.CrashReport.Models;
    
    public abstract class BepInExIntegration
    {
        public abstract IEnumerable<CapabilityModel> GetModuleCapabilities(ICollection<AssemblyModel> assemblies, LoaderPluginModel loaderPlugin);
        
        public List<LoaderPluginModel> GetPlugins(ICollection<AssemblyModel> assemblies) => Chainloader.PluginInfos.Select(kv =>
        {
            var capabilities = new List<CapabilityModel>();
            var loaderPlugin = new LoaderPluginModel
            {
                Id = kv.Value.Metadata.GUID,
                Name = kv.Value.Metadata.Name,
                Version = kv.Value.Metadata.Version.ToString(4),
                UpdateInfo = null,
                Dependencies = kv.Value.Dependencies.Select(x => new DependencyMetadataModel
                    {
                        ModuleOrPluginId = x.DependencyGUID,
                        Version = x.MinimumVersion.ToString(4),
                        VersionRange = null,
                        Type = DependencyMetadataType.LoadBefore,
                        IsOptional = x.Flags.HasFlag(BepInDependency.DependencyFlags.SoftDependency),
                        AdditionalMetadata = new List<MetadataModel>
                        {
                            new("IsHardDependency", x.Flags.HasFlag(BepInDependency.DependencyFlags.HardDependency).ToString()),
                            new("IsSoftDependency", x.Flags.HasFlag(BepInDependency.DependencyFlags.SoftDependency).ToString()),
                            
                            new("DISPLAY:Is Hard Dependency", x.Flags.HasFlag(BepInDependency.DependencyFlags.HardDependency).ToString()),
                            new("DISPLAY:Is Soft Dependency", x.Flags.HasFlag(BepInDependency.DependencyFlags.SoftDependency).ToString()),
                        },
                    })
                    .Concat(kv.Value.Incompatibilities.Select(x => new DependencyMetadataModel
                    {
                        ModuleOrPluginId = x.IncompatibilityGUID,
                        Version = null,
                        VersionRange = null,
                        Type = DependencyMetadataType.Incompatible,
                        IsOptional = false,
                        AdditionalMetadata = Array.Empty<MetadataModel>(),
                    }))
                    .ToList(),
                AdditionalMetadata = new List<MetadataModel>
                {
                    //new("TargettedBepInExVersion", kv.Value.TargettedBepInExVersion.ToString()),
                    //new("TypeName", kv.Value.TypeName),
                    new("Location", kv.Value.Location),
                    new("Processes", string.Join("; ", kv.Value.Processes.Select(x => x.ProcessName))),
                    
                    new("DISPLAY:Location", kv.Value.Location),
                    new("DISPLAY:Processes", string.Join("; ", kv.Value.Processes.Select(x => x.ProcessName))),
                },
                Capabilities = capabilities,
            };
            capabilities.AddRange(GetModuleCapabilities(assemblies, loaderPlugin).GroupBy(x => x.Name).Select(x => x.First()));
            return loaderPlugin;
        }).ToList();
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE