// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "HarmonyProvider.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using TaleWorlds.MountAndBlade.GauntletUI.Widgets.Multiplayer.Lobby;

#if !BUTRCRASHREPORT_DISABLE
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::BUTR.CrashReport.Interfaces;
    using global::BUTR.CrashReport.Models;

    using global::HarmonyLib;
    using global::HarmonyLib.BUTR.Extensions;

    using global::System;
    using global::System.Collections;
    using global::System.Collections.Generic;
    using global::System.Diagnostics;
    using global::System.Linq;
    using global::System.Reflection;
    
    using static global::HarmonyLib.BUTR.Extensions.AccessTools2;

    public class PatchProvider : IPatchProvider
    {
        private static IEnumerable<RuntimePatch> GetPatches(string type, MethodBase originalMethod, IEnumerable<Patch> patches) => patches.Select(x => new RuntimePatch
        {
            PatchProvider = "Harmony",
            PatchType = type,
            Original = originalMethod,
            Patch = x.PatchMethod,
            AdditionalMetadata = new List<MetadataModel>
            {
                new("Owner", x.owner),
                new("Index", x.index.ToString()),
                new("Priority", x.priority.ToString()),
                new("Before", string.Join(", ", x.before)),
                new("After", string.Join(", ", x.after)),
            },
        });

        public IList<RuntimePatch> GetAllPatches()
        {
            var runtimePatches = new List<RuntimePatch>();
           
            foreach (var originalMethod in Harmony.GetAllPatchedMethods())
            {
                var patches = Harmony.GetPatchInfo(originalMethod);
                if (patches is null) continue;
                
                runtimePatches.AddRange(GetPatches(originalMethod));
            }
            
            return runtimePatches;
        }

        public IList<RuntimePatch> GetPatches(MethodBase originalMethod)
        {
            var patches = Harmony.GetPatchInfo(originalMethod);
            if (patches is null) return new List<RuntimePatch>();
                
            var runtimePatches = new List<RuntimePatch>();
            runtimePatches.AddRange(GetPatches("Prefix", originalMethod, patches.Prefixes));
            runtimePatches.AddRange(GetPatches("Postfixes", originalMethod, patches.Postfixes));
            runtimePatches.AddRange(GetPatches("Finalizers", originalMethod, patches.Finalizers));
            runtimePatches.AddRange(GetPatches("Transpilers", originalMethod, patches.Transpilers));
            
            return runtimePatches;
        }

        public StackFrameRuntimePatch? GetPatches(StackFrame frame)
        {
            MethodBase? executingMethod;
            var methodFromStackframeIssue = false;
            try
            {
                executingMethod = Harmony.GetMethodFromStackframe(frame);
            }
            // NullReferenceException means the method was not found. Harmony doesn't handle this case gracefully
            catch (NullReferenceException e)
            {
                Trace.TraceError(e.ToString());
                executingMethod = frame.GetMethod()!;
            }
            // The given generic instantiation was invalid.
            // From what I understand, this will occur with generic methods
            // Also when static constructors throw errors, Harmony resolution will fail
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
                methodFromStackframeIssue = true;
                executingMethod = frame.GetMethod()!;
            }

            return null;
            //return GetPatches(executingMethod);
        }

        public MethodBase GetOriginalMethod(StackFrame frame)
        {
            try
            {
                if (Harmony.GetMethodFromStackframe(frame) is MethodInfo method)
                    return Harmony.GetOriginalMethod(method);
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }
            return frame.GetMethod();
        }

        public IntPtr GetNativeMethodBody(MethodBase method)
        {
            try
            {
                return MonoModUtils.GetNativeMethodBody(method);
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
                return IntPtr.Zero;
            }
        }
    }

    /*
    public class HarmonyProvider : IHarmonyProvider
    {
        public virtual IEnumerable<MethodBase> GetAllPatchedMethods() => Harmony.GetAllPatchedMethods();

        public virtual global::BUTR.CrashReport.Models.HarmonyPatches? GetPatchInfo(MethodBase originalMethod)
        {
            static global::BUTR.CrashReport.Models.HarmonyPatch Convert(Patch patch, global::BUTR.CrashReport.Models.HarmonyPatchType type) => new()
            {
                Owner = patch.owner,
                Index = patch.index,
                Priority = patch.priority,
                Before = patch.before,
                After = patch.after,
                PatchMethod = patch.PatchMethod,
                Type = type,
            };
        
            var patches = Harmony.GetPatchInfo(originalMethod);
            if (patches is null) return null;
            return new()
            {
                Prefixes = patches.Prefixes.Select(x => Convert(x, Models.HarmonyPatchType.Prefix)).ToArray(),
                Postfixes = patches.Postfixes.Select(x => Convert(x, Models.HarmonyPatchType.Postfix)).ToArray(),
                Finalizers = patches.Finalizers.Select(x => Convert(x, Models.HarmonyPatchType.Finalizer)).ToArray(),
                Transpilers = patches.Transpilers.Select(x => Convert(x, Models.HarmonyPatchType.Transpiler)).ToArray(),
            };
        }

        public virtual HarmonyPatches? GetPatchInfo(StackFrame frame, IModuleProvider moduleProvider, ILoaderPluginProvider loaderPluginProvider)
        {
            MethodBase? executingMethod;
            var methodFromStackframeIssue = false;
            try
            {
                executingMethod = Harmony.GetMethodFromStackframe(frame);
            }
            // NullReferenceException means the method was not found. Harmony doesn't handle this case gracefully
            catch (NullReferenceException e)
            {
                Trace.TraceError(e.ToString());
                executingMethod = frame.GetMethod()!;
            }
            // The given generic instantiation was invalid.
            // From what I understand, this will occur with generic methods
            // Also when static constructors throw errors, Harmony resolution will fail
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
                methodFromStackframeIssue = true;
                executingMethod = frame.GetMethod()!;
            }
            
            var executingIdentifiableMethod = executingMethod is MethodInfo mi ? MonoModUtils.GetIdentifiable(mi) as MethodInfo ?? mi : null;
            var originalIdentifiableMethod = executingIdentifiableMethod is not null ? Harmony.GetOriginalMethod(executingIdentifiableMethod) : null;
            return originalIdentifiableMethod is not null ? GetPatchInfo(originalIdentifiableMethod) : null;
        }

        public virtual MethodInfo? GetExecutingMethod(StackFrame frame)
        {
            try
            {
                if (Harmony.GetMethodFromStackframe(frame) is MethodInfo method)
                    return method;
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }
            return null;
        }

        public virtual MethodBase? GetOriginalMethod(StackFrame frame)
        {
            try
            {
                if (Harmony.GetMethodFromStackframe(frame) is MethodInfo method)
                    return Harmony.GetOriginalMethod(method);
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }
            return null;
        }

        public IntPtr GetNativeMethodBody(MethodBase method) => MonoModUtils.GetNativeMethodBody(method);
    }
    */
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE