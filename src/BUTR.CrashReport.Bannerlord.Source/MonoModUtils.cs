// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "MonoModProvider.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BUTRCRASHREPORT_DISABLE
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::BUTR.CrashReport.Interfaces;
    using global::BUTR.CrashReport.Models;

    using global::HarmonyLib;
    using global::HarmonyLib.BUTR.Extensions;

    using global::System;
    using global::System.Collections;
    using global::System.Collections.Generic;
    using global::System.Diagnostics;
    using global::System.Linq;
    using global::System.Reflection;
    
    using static global::HarmonyLib.BUTR.Extensions.AccessTools2;

    internal static class MonoModUtils
    {
        private static readonly AccessTools.FieldRef<object, IDictionary>? DetourStatesField = FieldRefAccess<IDictionary>(
            "MonoMod.RuntimeDetour.DetourManager:detourStates", logErrorInTrace: false);
        private static readonly AccessTools.FieldRef<object, object>? InfoField = FieldRefAccess<object>(
            "MonoMod.RuntimeDetour.DetourManager+ManagedDetourState:info", logErrorInTrace: false);
        private static readonly AccessTools.FieldRef<object, IEnumerable>? DetoursField = FieldRefAccess<IEnumerable>(
            "MonoMod.RuntimeDetour.MethodDetourInfo:lazyDetours", logErrorInTrace: false);
        private static readonly AccessTools.FieldRef<object, IEnumerable>? ILHooksField = FieldRefAccess<IEnumerable>(
            "MonoMod.RuntimeDetour.MethodDetourInfo:lazyILHooks", logErrorInTrace: false);
        
        private delegate MethodBase GetDetourInfoEntryDelegate(object instance);
        private static readonly GetDetourInfoEntryDelegate? GetDetourInfoEntry = GetPropertyGetterDelegate<GetDetourInfoEntryDelegate>(
            "MonoMod.RuntimeDetour.DetourInfo:Entry", logErrorInTrace: false);
        
        private delegate MethodBase GetILHookInfoManipulatorMethodDelegate(object instance);
        private static readonly GetILHookInfoManipulatorMethodDelegate? GetILHookInfoManipulatorMethod = GetPropertyGetterDelegate<GetILHookInfoManipulatorMethodDelegate>(
            "MonoMod.RuntimeDetour.ILHookInfo:ManipulatorMethod", logErrorInTrace: false);
        
        private delegate bool GetDetourBaseIsAppliedDelegate(object instance);
        private static readonly GetDetourBaseIsAppliedDelegate? GetDetourBaseIsApplied = GetPropertyGetterDelegate<GetDetourBaseIsAppliedDelegate>(
            "MonoMod.RuntimeDetour.DetourBase:IsApplied", logErrorInTrace: false);
        
        private delegate object GetDetourBaseConfigDelegate(object instance);
        private static readonly GetDetourBaseConfigDelegate? GetDetourBaseConfig = GetPropertyGetterDelegate<GetDetourBaseConfigDelegate>(
            "MonoMod.RuntimeDetour.DetourBase:Config", logErrorInTrace: false);
        
        private delegate string GetDetourConfigIdDelegate(object instance);
        private static readonly GetDetourConfigIdDelegate? GetDetourConfigId = GetPropertyGetterDelegate<GetDetourConfigIdDelegate>(
            "MonoMod.RuntimeDetour.DetourConfig:Id", logErrorInTrace: false);
        
        private delegate int? GetDetourConfigPriorityDelegate(object instance);
        private static readonly GetDetourConfigPriorityDelegate? GetDetourConfigPriority = GetPropertyGetterDelegate<GetDetourConfigPriorityDelegate>(
            "MonoMod.RuntimeDetour.DetourConfig:Priority", logErrorInTrace: false);
        
        private delegate int GetDetourConfigSubPriorityDelegate(object instance);
        private static readonly GetDetourConfigSubPriorityDelegate? GetDetourConfigSubPriority = GetPropertyGetterDelegate<GetDetourConfigSubPriorityDelegate>(
            "MonoMod.RuntimeDetour.DetourConfig:SubPriority", logErrorInTrace: false);
        
        private delegate IEnumerable<string> GetDetourConfigBeforeDelegate(object instance);
        private static readonly GetDetourConfigBeforeDelegate? GetDetourConfigBefore = GetPropertyGetterDelegate<GetDetourConfigBeforeDelegate>(
            "MonoMod.RuntimeDetour.DetourConfig:Before", logErrorInTrace: false);
        
        private delegate IEnumerable<string> GetDetourConfigAfterDelegate(object instance);
        private static readonly GetDetourConfigAfterDelegate? GetDetourConfigAfter = GetPropertyGetterDelegate<GetDetourConfigAfterDelegate>(
            "MonoMod.RuntimeDetour.DetourConfig:After", logErrorInTrace: false);
        
        //private delegate object GetCurrentRuntimeDelegate();
        //private static readonly AccessTools.FieldRef<object, MethodBase>? DetoursField = FieldRefAccess<MethodBase>(
        //    "MonoMod.RuntimeDetour.DetourInfo:Entry", logErrorInTrace: false);
        
        private delegate object GetCurrentRuntimeDelegate();
        private static readonly GetCurrentRuntimeDelegate? CurrentRuntimeMethod = GetPropertyGetterDelegate<GetCurrentRuntimeDelegate>(
            "MonoMod.RuntimeDetour.DetourHelper:Runtime", logErrorInTrace: false);

        private delegate MethodBase GetIdentifiableOldDelegate(object instance, MethodBase method);
        private static readonly GetIdentifiableOldDelegate? GetIdentifiableOldMethod = GetDelegate<GetIdentifiableOldDelegate>(
            "MonoMod.RuntimeDetour.IDetourRuntimePlatform:GetIdentifiable", logErrorInTrace: false);

        private delegate IntPtr GetNativeStartDelegate(object instance, MethodBase method);
        private static readonly GetNativeStartDelegate? GetNativeStartMethod = GetDelegate<GetNativeStartDelegate>(
            "MonoMod.RuntimeDetour.IDetourRuntimePlatform:GetNativeStart", logErrorInTrace: false);


        private delegate object GetCurrentPlatformTripleDelegate();
        private static readonly GetCurrentPlatformTripleDelegate? CurrentPlatformTripleMethod = GetPropertyGetterDelegate<GetCurrentPlatformTripleDelegate>(
            "MonoMod.Core.Platforms.PlatformTriple:Current", logErrorInTrace: false);

        private delegate MethodBase GetIdentifiableDelegate(object instance, MethodBase method);
        private static readonly GetIdentifiableDelegate? GetIdentifiableMethod = GetDelegate<GetIdentifiableDelegate>(
            "MonoMod.Core.Platforms.PlatformTriple:GetIdentifiable", logErrorInTrace: false);

        private delegate IntPtr GetNativeMethodBodyDelegate(object instance, MethodBase method);
        private static readonly GetNativeMethodBodyDelegate? GetNativeMethodBodyMethod = GetDelegate<GetNativeMethodBodyDelegate>(
            "MonoMod.Core.Platforms.PlatformTriple:GetNativeMethodBody", logErrorInTrace: false);

        public static MethodBase? GetIdentifiable(MethodBase method)
        {
            try
            {
                if (CurrentRuntimeMethod?.Invoke() is { } runtime)
                    return GetIdentifiableOldMethod?.Invoke(runtime, method);

                if (CurrentPlatformTripleMethod?.Invoke() is { } platformTriple)
                    return GetIdentifiableMethod?.Invoke(platformTriple, method);
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }

            return null;
        }

        public static IntPtr GetNativeMethodBody(MethodBase method)
        {
            try
            {
                if (CurrentRuntimeMethod?.Invoke() is { } runtine)
                    return GetNativeStartMethod?.Invoke(runtine, method) ?? IntPtr.Zero;

                if (CurrentPlatformTripleMethod?.Invoke() is { } platformTriple)
                    return GetNativeMethodBodyMethod?.Invoke(platformTriple, method) ?? IntPtr.Zero;
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }

            return IntPtr.Zero;
        }
        
        /*
        public static MonoModPatches? GetPatches(MethodBase originalMethod)
        {
            try
            {
                if (DetourStatesField?.Invoke() is not { } detourStates)
                    return null;
                
                var detourState = detourStates.Contains(originalMethod) ? detourStates[originalMethod] : null;
                if (detourState is null) return null;

                if (InfoField?.Invoke(detourState) is not { } info)
                    return null;
                
                if (DetoursField?.Invoke(info) is not { } detours)
                    return null;
                
                if (ILHooksField?.Invoke(info) is not { } ilHooks)
                    return null;

                var detourList = new List<MonoModPatch>();
                foreach (var detour in detours)
                {
                    var config = GetDetourBaseConfig?.Invoke(detour);
                    detourList.Add(new MonoModPatch
                    {
                        Method = GetDetourInfoEntry?.Invoke(detour),
                        IsActive = GetDetourBaseIsApplied?.Invoke(detour) ?? false,
                        Id = GetDetourConfigId?.Invoke(config) ?? "Unknown",
                        Index = null,
                        MaxIndex = null,
                        GlobalIndex = null,
                        Priority = GetDetourConfigPriority?.Invoke(config),
                        SubPriority = GetDetourConfigSubPriority?.Invoke(config) ?? 0,
                        Before = GetDetourConfigBefore?.Invoke(config)?.ToArray() ?? new string[0],
                        After = GetDetourConfigAfter.Invoke(config)?.ToArray() ?? new string[0],
                    });
                }
                
                var ilHooksList = new List<MonoModPatch>();
                foreach (var ilHook in ilHooks)
                {
                    var config = GetDetourBaseConfig?.Invoke(ilHook);
                    ilHooksList.Add(new MonoModPatch
                    {
                        Method = GetILHookInfoManipulatorMethod?.Invoke(ilHook),
                        IsActive = GetDetourBaseIsApplied?.Invoke(ilHook) ?? false,
                        Id = GetDetourConfigId?.Invoke(config) ?? "Unknown",
                        Index = null,
                        MaxIndex = null,
                        GlobalIndex = null,
                        Priority = GetDetourConfigPriority?.Invoke(config),
                        SubPriority = GetDetourConfigSubPriority?.Invoke(config) ?? 0,
                        Before = GetDetourConfigBefore?.Invoke(config)?.ToArray() ?? new string[0],
                        After = GetDetourConfigAfter.Invoke(config)?.ToArray() ?? new string[0],
                    });
                }
                
                return new MonoModPatches
                {
                    Detours = detourList,
                    ILHooks = ilHooksList,
                };
                
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
            }

            return null;
        }
        */
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE