// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "OSUtilities.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BUTRCRASHREPORT_DISABLE
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::System;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Runtime.InteropServices;
    using global::System.Xml.Linq;

    internal static class OSUtilities
    {
        [DllImport("kernel32.dll", CharSet=CharSet.Ansi, ExactSpelling=true, SetLastError=true)]
        static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

        [DllImport("kernel32.dll", CharSet=CharSet.Unicode, SetLastError=true)]
        public static extern IntPtr GetModuleHandle([MarshalAs(UnmanagedType.LPWStr)] string lpModuleName);

        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int RtlGetVersion(out RTL_OSVERSIONINFOEX lpVersionInformation);

        [StructLayout(LayoutKind.Sequential)]
        private struct RTL_OSVERSIONINFOEX
        {
            internal uint dwOSVersionInfoSize;
            internal uint dwMajorVersion;
            internal uint dwMinorVersion;
            internal uint dwBuildNumber;
            internal uint dwPlatformId;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
            internal string szCSDVersion;
        }

        public static bool IsWine()
        {
            var handle = GetModuleHandle("ntdll.dll");
            return handle != IntPtr.Zero && GetProcAddress(handle, "wine_get_version") != IntPtr.Zero;
        }

        public static string GetOSVersionWindows()
        {
            var osName = "Windows";
            var osVersion  = string.Empty;

            var osvi = new RTL_OSVERSIONINFOEX();
            osvi.dwOSVersionInfoSize = (uint) Marshal.SizeOf(osvi);
            if (RtlGetVersion(out osvi) == 0)
                osVersion = $"{osvi.dwMajorVersion}.{osvi.dwMinorVersion}.{osvi.dwBuildNumber}";

            return $"{osName} {osVersion}";
        }

        public static string GetOSVersionLinux()
        {
            var osName = string.Empty;
            var osVersion  = string.Empty;

            var filePath = string.Empty;

            try
            {
                if (File.Exists("/usr/lib/os-release"))
                    filePath = "/usr/lib/os-release";
            }
            catch { /* ignored */ }

            try
            {
                if (File.Exists("/etc/os-release"))
                    filePath = "/etc/os-release";
            }
            catch { /* ignored */ }

            try
            {
                if (File.Exists("/etc/lsb-release"))
                    filePath = "/etc/lsb-release";
            }
            catch { /* ignored */ }

            if (string.IsNullOrEmpty(filePath))
                return "UNKNOWN LINUX";

            try
            {
                using (var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read))
                {
                    using (var reader = new StreamReader(fileStream))
                    {
                        string? line;
                        while ((line = reader.ReadLine()) != null)
                        {
                            if (line.StartsWith("NAME="))
                                osName = line.Split('=')[1].Trim('"');
                            if (line.StartsWith("DISTRIB_ID="))
                                osName = line.Split('=')[1].Trim('"');

                            if (line.StartsWith("VERSION_ID="))
                                osVersion = line.Split('=')[1].Trim('"');
                            if (line.StartsWith("DISTRIB_RELEASE="))
                                osVersion = line.Split('=')[1].Trim('"');
                        }
                    }
                }
            }
            catch
            {
                return "UNKNOWN LINUX";
            }

            return $"{osName} {osVersion}";
        }

        public static string? GetOSXVersion()
        {
            try
            {
                if (!File.Exists("/System/Library/CoreServices/SystemVersion.plist"))
                    return null;
            }
            catch { /* ignored */ }

            try
            {
                using (var fileStream = new FileStream("/System/Library/CoreServices/SystemVersion.plist", FileMode.Open, FileAccess.Read))
                {
                    using (var reader = new StreamReader(fileStream))
                    {
                        var systemVersionFile = XDocument.Load(reader);
                        var parsedSystemVersionFile = systemVersionFile.Descendants("dict")
                            .SelectMany(d => d.Elements("key").Zip(d.Elements().Where(e => e.Name != "key"), (k, v) => new { Key = k, Value = v }))
                            .ToDictionary(i => i.Key.Value, i => i.Value.Value);
                        var productName = parsedSystemVersionFile.ContainsKey("ProductName") ? parsedSystemVersionFile["ProductName"] : null;
                        var productVersion = parsedSystemVersionFile.ContainsKey("ProductVersion") ? parsedSystemVersionFile["ProductVersion"] : null;
                        return $"{productName} {productVersion}";
                    }
                }
            }
            catch
            {
                return null;
            }
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE