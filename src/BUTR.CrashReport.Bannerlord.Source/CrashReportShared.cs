// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "CrashReportShared.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BUTRCRASHREPORT_DISABLE || BUTRCRASHREPORT_ENABLE_HTML_RENDERER
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::BUTR.CrashReport.Extensions;
    using global::BUTR.CrashReport.Models;

    using global::System.Collections.Generic;
    using global::System.Linq;

    internal static class CrashReportShared
    {
        // Inspired by SMAPI's detection
        // Still Work In Progress for more complex capabilities
        private static readonly string[] OSFileSystemTypeReferences = new[]
        {
            typeof(System.IO.File).FullName!,
            typeof(System.IO.FileStream).FullName!,
            typeof(System.IO.FileInfo).FullName!,
            typeof(System.IO.Directory).FullName!,
            typeof(System.IO.DirectoryInfo).FullName!,
            typeof(System.IO.DriveInfo).FullName!,
            typeof(System.IO.FileSystemWatcher).FullName!,
        };
        private static readonly string[] GameFileSystemTypeReferences = new[]
        {
            "TaleWorlds.Library.*File*",
            "TaleWorlds.Library.*Directory*",
            "TaleWorlds.SaveSystem.*File*",
        };
        private static readonly string[] ShellTypeReferences = new[]
        {
            typeof(System.Diagnostics.Process).FullName!,
        };
        private static readonly string[] SaveSystemTypeReferences = new[]
        {
            "TaleWorlds.Library.*Save*",
            "TaleWorlds.Core.MBSaveLoad",
        };
        private static readonly string[] SaveSystemAssemblyReferences = new[]
        {
            "TaleWorlds.SaveSystem",
        };
        private static readonly string[] GameEntitiesTypeReferences = new[]
        {
            "TaleWorlds.Core.EntitySystem*",
        };
        private static readonly string[] GameEntitiesAssemblyReferences = new[]
        {
            "TaleWorlds.ObjectSystem",
        };
        private static readonly string[] InputSystemAssemblyReferences = new[]
        {
            "TaleWorlds.InputSystem",
        };
        private static readonly string[] LocalizationSystemAssemblyReferences = new[]
        {
            "TaleWorlds.Localization",
        };
        private static readonly string[] UITypeReferences = new[]
        {
            "TaleWorlds.Library.IViewModel",
            "TaleWorlds.Library.ViewModel",
        };
        private static readonly string[] UIAssemblyReferences = new[]
        {
            "*GauntletUI*",
        };
        private static readonly string[] HttpTypeReferences = new[]
        {
            "TaleWorlds.Library.*Http*",
            "System.Net*Http.*",
        };
        private static readonly string[] AchievementSystemTypeReferences = new[]
        {
            "TaleWorlds.*Achievement*",
        };
        private static readonly string[] CampaignSystemTypeReferences = new[]
        {
            "TaleWorlds.*CampaignSystem*",
        };
        private static readonly string[] SkillSystemTypeReferences = new[]
        {
            "TaleWorlds.Core.CharacterSkills",
            "TaleWorlds.Core.DefaultSkills",
            "TaleWorlds.Core.SkillObject",
        };
        private static readonly string[] ItemSystemTypeReferences = new[]
        {
            "TaleWorlds.Core.ItemObject",
        };
        private static readonly string[] CultureSystemTypeReferences = new[]
        {
            "TaleWorlds.*Culture*",
        };

        public static IEnumerable<CapabilityModuleOrPluginModel> GetModuleCapabilities(ICollection<AssemblyModel> assemblies, ModuleModel module)
        {
            if (module.ContainsTypeReferences(assemblies, CrashReportShared.OSFileSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("OS File System");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.GameFileSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Game File System");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.ShellTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Shell");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.SaveSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Save System");
            if (module.ContainsAssemblyReferences(assemblies, CrashReportShared.SaveSystemAssemblyReferences))
                yield return new CapabilityModuleOrPluginModel("Save System");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.GameEntitiesTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Game Entities");
            if (module.ContainsAssemblyReferences(assemblies, CrashReportShared.GameEntitiesAssemblyReferences))
                yield return new CapabilityModuleOrPluginModel("Game Entities");

            if (module.ContainsAssemblyReferences(assemblies, CrashReportShared.InputSystemAssemblyReferences))
                yield return new CapabilityModuleOrPluginModel("Input System");

            if (module.ContainsAssemblyReferences(assemblies, CrashReportShared.LocalizationSystemAssemblyReferences))
                yield return new CapabilityModuleOrPluginModel("Localization");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.UITypeReferences))
                yield return new CapabilityModuleOrPluginModel("User Interface");
            if (module.ContainsAssemblyReferences(assemblies, CrashReportShared.UIAssemblyReferences))
                yield return new CapabilityModuleOrPluginModel("User Interface");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.HttpTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Http");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.AchievementSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Achievements");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.CampaignSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Campaign");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.SkillSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Skills");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.ItemSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Items");

            if (module.ContainsTypeReferences(assemblies, CrashReportShared.CultureSystemTypeReferences))
                yield return new CapabilityModuleOrPluginModel("Cultures");
        }

        public static string GetBUTRLoaderVersion(CrashReportModel crashReport)
        {
            if (crashReport.Assemblies.FirstOrDefault(x => x.Id.Name == "Bannerlord.BUTRLoader") is { } bAssembly)
                return bAssembly.Id.Version ?? string.Empty;
            return string.Empty;
        }
        
        public static string GetBLSEVersion(CrashReportModel crashReport)
        {
            if (crashReport.Assemblies.FirstOrDefault(x => x.Id.Name == "Bannerlord.BLSE") is { } bAssembly)
                return bAssembly.Id.Version ?? string.Empty;
            return string.Empty;
        }

        public static string GetLauncherType(CrashReportModel crashReport)
        {
            if (crashReport.AdditionalMetadata.FirstOrDefault(x => x.Key == "METADATA:Parent_Process_Name")?.Value is { } parentProcessName)
            {
                return parentProcessName switch
                {
                    "Vortex" => "vortex",
                    "BannerLordLauncher" => "bannerlordlauncher",
                    "steam" => "steam",
                    "GalaxyClient" => "gog",
                    "EpicGamesLauncher" => "epicgames",
                    "devenv" => "debuggervisualstudio",
                    "JetBrains.Debugger.Worker64c" => "debuggerjetbrains",
                    "explorer" => "explorer",
                    "NovusLauncher" => "novus",
                    "ModOrganizer" => "modorganizer",
                    _ => $"unknown launcher - {parentProcessName}"
                };
            }

            if (!string.IsNullOrEmpty(GetBUTRLoaderVersion(crashReport)))
                return "butrloader";

            if (!string.IsNullOrEmpty(GetBLSEVersion(crashReport)))
                return "blse";

            return "vanilla";
        }

        public static string GetLauncherVersion(CrashReportModel crashReport)
        {
            if (crashReport.AdditionalMetadata.FirstOrDefault(x => x.Key == "METADATA:Parent_Process_File_Version")?.Value is { } parentProcessFileVersion)
                return parentProcessFileVersion;

            if (GetBUTRLoaderVersion(crashReport) is { } bVersion && !string.IsNullOrEmpty(bVersion))
                return bVersion;

            if (GetBLSEVersion(crashReport) is { } blseVersion && !string.IsNullOrEmpty(blseVersion))
                return blseVersion;

            return "0";
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE