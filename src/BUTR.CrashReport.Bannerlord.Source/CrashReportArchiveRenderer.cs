// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "CrashReportArchiveRenderer.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion


#if !BUTRCRASHREPORT_DISABLE || BUTRCRASHREPORT_ENABLE_ARCHIVE_RENDERER
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::BUTR.CrashReport.Models;

    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.IO.Compression;
    using global::System.Linq;

    internal static class CrashReportArchiveRenderer
    {
        public static Stream Build(CrashReportModel crashReport, IEnumerable<LogSource> files, Stream crashReportJson, Stream logsJson, Stream miniDump, Stream saveFile, Stream screenshot)
        {
            var ms = new MemoryStream();

            using (var archive = new ZipArchive(ms, ZipArchiveMode.Create, true))
            {
                crashReportJson.Seek(0, SeekOrigin.Begin);
                var crashReportFile = archive.CreateEntry("crashreport.json");
                using (var crashReportStream = crashReportFile.Open())
                {
                    crashReportJson.CopyTo(crashReportStream);
                }

                if (logsJson != Stream.Null)
                {
                    var logsFile = archive.CreateEntry("logs.json");
                    using (var logsStream = logsFile.Open())
                    {
                        logsJson.Seek(0, SeekOrigin.Begin);
                        logsJson.CopyTo(logsStream);
                    }
                }

                if (miniDump != Stream.Null)
                {
                    var miniDumpFile = archive.CreateEntry("minidump.dmp");
                    using (var miniDumpStream = miniDumpFile.Open())
                    {
                        miniDump.Seek(0, SeekOrigin.Begin);
                        miniDump.CopyTo(miniDumpStream);
                    }
                }

                if (saveFile != Stream.Null)
                {
                    var saveFileFile = archive.CreateEntry("save.sav");
                    using (var saveFileStream = saveFileFile.Open())
                    {
                        saveFile.Seek(0, SeekOrigin.Begin);
                        saveFile.CopyTo(saveFileStream);
                    }
                }

                if (screenshot != Stream.Null)
                {
                    var screenshotFile = archive.CreateEntry("screenshot.bmp");
                    using (var screenshotStream = screenshotFile.Open())
                    {
                        screenshot.Seek(0, SeekOrigin.Begin);
                        screenshot.CopyTo(screenshotStream);
                    }
                }
            }

            return ms;
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE