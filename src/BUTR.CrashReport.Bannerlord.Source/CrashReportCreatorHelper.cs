// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "CrashReportCreatorHelper.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !BUTRCRASHREPORT_DISABLE
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::Bannerlord.BUTR.Shared.Helpers;
    using global::Bannerlord.ModuleManager;

    using global::BUTR.CrashReport.Interfaces;
    using global::BUTR.CrashReport.Models;

    using global::HarmonyLib;
    using global::HarmonyLib.BUTR.Extensions;

    using global::System;
    using global::System.Collections.Generic;
    using global::System.Diagnostics;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Reflection;

    internal class CrashReportInfoHelper :
        IAssemblyUtilities,
        ICrashReportMetadataProvider,
        ILoaderPluginProvider,
        IModelConverter,
        IModuleProvider,
        IPathAnonymizer
    {
        private static readonly AccessTools.FieldRef<HashSet<string>>? GetFeatures =
            AccessTools2.StaticFieldRefAccess<HashSet<string>>("Bannerlord.BLSE.FeatureIds:Features");
        
        private static List<ILoaderPluginInfo> GetPlugins()
        {
            var patches = Harmony.GetAllPatchedMethods().Select(Harmony.GetPatchInfo);
            var featurePatches = patches
                .SelectMany(x => x.Prefixes.Concat(x.Postfixes).Concat(x.Finalizers).Concat(x.Transpilers))
                .Select(x => x.PatchMethod)
                .Select(x => x.DeclaringType?.Namespace)
                .OfType<string>()
                .Where(x => x.StartsWith("Bannerlord.BLSE.Features."))
                .Select(x => x.Substring("Bannerlord.BLSE.Features.".Length))
                .Select(x => x.Substring(0, x.IndexOf('.') is var idx and not -1 ? idx : x.Length))
                .Distinct()
                .Select(x => $"BLSE.{x}")
                .ToList();
            
            if (featurePatches.Count > 0)
                featurePatches.Add("BLSE.AssemblyResolver");
            
            return featurePatches.Select(x => new LoaderPluginInfo
            {
                Id = x,
                Version = null,
                UpdateInfo = null,
            }).OfType<ILoaderPluginInfo>().ToList() ?? new();
            /*
            return GetFeatures?.Invoke().Select(x => new LoaderPluginInfo()
            {
                Id = x,
                Version = null,
                UpdateInfo = null,
            }).OfType<ILoaderPluginInfo>().ToList() ?? new();
            */
        }

        public virtual CrashReportMetadataModel GetCrashReportMetadataModel(CrashReportInfo crashReport)
        {
            var butrLoaderVersion = GetBUTRLoaderVersion(crashReport);
            var blseVersion = GetBLSEVersion(crashReport);
            var launcherExVersion = GetLauncherExVersion(crashReport);
            
            var additionalMetdata = new List<MetadataModel>();
            if (!string.IsNullOrEmpty(launcherExVersion))
                additionalMetdata.Add(new MetadataModel { Key = "LauncherExVersion", Value = launcherExVersion });
            
            return new CrashReportMetadataModel
            {
                GameName = "Bannerlord",
                GameVersion = ApplicationVersionHelper.GameVersionStr(),

                LoaderPluginProviderName = !string.IsNullOrEmpty(butrLoaderVersion) ? "BUTRLoader" : !string.IsNullOrEmpty(blseVersion) ? "BLSE" : null,
                LoaderPluginProviderVersion = !string.IsNullOrEmpty(butrLoaderVersion) ? butrLoaderVersion : !string.IsNullOrEmpty(blseVersion) ? blseVersion : null,

                LauncherType = GetLauncherType(crashReport),
                LauncherVersion = GetLauncherVersion(crashReport),

                Runtime = null,

                AdditionalMetadata = additionalMetdata,
            };
        }


        public virtual IEnumerable<Assembly> Assemblies() => AccessTools2.AllAssemblies();

        public virtual IModuleInfo? GetAssemblyModule(CrashReportInfo crashReport, Assembly assembly)
        {
            try
            {
                var module = !assembly.IsDynamic ? ModuleInfoHelper.GetModuleByType(AccessTools2.GetTypesFromAssembly(assembly).FirstOrDefault()) : null;
                return module is not null ? crashReport.LoadedModules.FirstOrDefault(x => x.Id == module.Id) : null;
            }
            catch (Exception e)
            {
                Trace.TraceError(e.ToString());
                return null;
            }
        }

        public virtual ILoaderPluginInfo? GetAssemblyPlugin(CrashReportInfo crashReport, Assembly assembly) => null;
        
        public virtual AssemblyModelType GetAssemblyType(AssemblyModelType type, CrashReportInfo crashReport, Assembly assembly)
        {
            var isTWCore = !assembly.IsDynamic && assembly.Location.IndexOf(@"Mount & Blade II Bannerlord\bin\", StringComparison.InvariantCultureIgnoreCase) >= 0;
            if (isTWCore) type |= AssemblyModelType.GameCore;

            var module = !assembly.IsDynamic ? ModuleInfoHelper.GetModuleByType(AccessTools2.GetTypesFromAssembly(assembly).FirstOrDefault()) : null;
            if (module is not null && !module.IsOfficial) type |= AssemblyModelType.Module;
            if (module is not null &&  module.IsOfficial) type |= AssemblyModelType.GameModule;
            
            return type;
        }
        
        
        public virtual ICollection<IModuleInfo> GetLoadedModules() => ModuleInfoHelper.GetLoadedModules().Select(x => new ModuleInfo(x)).ToArray();

        public virtual IModuleInfo? GetModuleByType(Type? type) => ModuleInfoHelper.GetModuleByType(type) is { } moduleInfo ? new ModuleInfo(moduleInfo) : null;

        
        public virtual ICollection<ILoaderPluginInfo> GetLoadedLoaderPlugins() => GetPlugins();

        public virtual ILoaderPluginInfo? GetLoaderPluginByType(Type? type)
        {
            if (type is null)
                return null;
            
            if (type.Namespace is null || !type.Namespace.StartsWith("Bannerlord.BLSE.Features."))
                return null;
            
            var id = type.Namespace.Substring("Bannerlord.BLSE.Features.".Length);
            id = id.Substring(0, id.IndexOf('.') is var idx and not -1 ? idx : id.Length);
            return new LoaderPluginInfo
            {
                Id = $"BLSE.{id}",
                Version = null,
                UpdateInfo = null,
            };
        }

        
        public virtual List<ModuleModel> ToModuleModels(ICollection<IModuleInfo> loadedModules, ICollection<AssemblyModel> assemblies)
        {
            var moduleModels = new List<ModuleModel>(loadedModules.Count);
            foreach (var module in loadedModules.OfType<ModuleInfo>().Select(x => x.InternalModuleInfo))
            {
                var isManagedByVortex = File.Exists(Path.Combine(module.Path, "__folder_managed_by_vortex"));

                moduleModels.Add(Convert(module, isManagedByVortex, assemblies));
            }
            return moduleModels;
        }
        
        public virtual List<LoaderPluginModel> ToLoaderPluginModels(ICollection<ILoaderPluginInfo> loadedLoaderPlugins, ICollection<AssemblyModel> assemblies) => loadedLoaderPlugins.OfType<LoaderPluginInfo>().Select(x => new LoaderPluginModel
        {
            Id = x.Id,
            Name = x.Id,
            Version = x.Version,
            UpdateInfo = x.UpdateInfo is not null && x.UpdateInfo.Split(':') is { Length: 2 } split ? new UpdateInfoModuleOrLoaderPlugin
            {
                Provider = split[0],
                Value = split[1],
            } : null,
            Dependencies = Array.Empty<DependencyMetadataModel>(),
            Capabilities = Array.Empty<CapabilityModuleOrPluginModel>(),
            AdditionalMetadata = Array.Empty<MetadataModel>(),
        }).ToList();

        
        public virtual bool TryHandlePath(string path, out string anonymizedPath)
        {
            anonymizedPath = string.Empty;
            
            if (path.IndexOf("Mount & Blade II Bannerlord", StringComparison.OrdinalIgnoreCase) is var idxRoot and not -1)
            {
                anonymizedPath = path.Substring(idxRoot);
                return true;
            }

            return false;
        }

        protected static ModuleModel Convert(ModuleInfoExtendedWithMetadata module, bool isManagedByVortex, ICollection<AssemblyModel> assemblies)
        {
            var capabilities = new List<CapabilityModuleOrPluginModel>();
            var moduleModel = new ModuleModel
            {
                Id = module.Id,
                Name = module.Name,
                Version = module.Version.ToString(),
                IsExternal = module.IsExternal,
                IsOfficial = module.IsOfficial,
                IsSingleplayer = module.IsSingleplayerModule,
                IsMultiplayer = module.IsMultiplayerModule,
                Url = !string.IsNullOrEmpty(module.Url) ? module.Url : null,
                UpdateInfo = !string.IsNullOrEmpty(module.UpdateInfo) && module.UpdateInfo.Split(':') is {Length: 2} split
                    ? new UpdateInfoModuleOrLoaderPlugin()
                    {
                        Provider = split[0],
                        Value = split[1],
                    }
                    : null,
                DependencyMetadatas = module.DependenciesAllDistinct().Select(x => new DependencyMetadataModel
                {
                    ModuleOrPluginId = x.Id,
                    Type = x.IsIncompatible ? DependencyMetadataModelType.Incompatible : (DependencyMetadataModelType) x.LoadType,
                    IsOptional = x.IsOptional,
                    Version = !x.Version.Equals(ApplicationVersion.Empty) ? x.Version.ToString() : null,
                    VersionRange = !x.VersionRange.Equals(ApplicationVersionRange.Empty) ? x.VersionRange.ToString() : null,
                    AdditionalMetadata = Array.Empty<MetadataModel>(),
                }).ToArray(),
                SubModules = module.SubModules.Where(ModuleInfoHelper.CheckIfSubModuleCanBeLoaded).Select(x => new ModuleSubModuleModel
                {
                    Name = x.Name,
                    AssemblyId = new()
                    {
                        Name = x.DLLName,
                        Version = null,
                        PublicKeyToken = null,
                    },
                    Entrypoint = x.SubModuleClassType,
                    AdditionalMetadata = x.Assemblies.Select(y => new MetadataModel {Key = "METADATA:Assembly", Value = y})
                        .Concat(x.Tags.SelectMany(y => y.Value.Select(z => new MetadataModel {Key = y.Key, Value = z})))
                        .ToArray(),
                }).ToArray(),
                Capabilities = capabilities,
                AdditionalMetadata = new MetadataModel[]
                {
                    new MetadataModel {Key = "METADATA:MANAGED_BY_VORTEX", Value = isManagedByVortex.ToString()},
                },
            };
            capabilities.AddRange(CollectionsExtensions.DistinctBy(CrashReportShared.GetModuleCapabilities(assemblies, moduleModel), x => x.Name));
            return moduleModel;
        }

        protected static string GetBUTRLoaderVersion(CrashReportInfo crashReport)
        {
            if (crashReport.AvailableAssemblies.FirstOrDefault(x => x.Key.Name == "Bannerlord.BUTRLoader") is { Key: { } assemblyName } )
                return assemblyName.Version?.ToString() ?? string.Empty;
            return string.Empty;
        }
        protected static string GetBLSEVersion(CrashReportInfo crashReport)
        {
            var blseMetadata = crashReport.AvailableAssemblies.FirstOrDefault(x => x.Key.Name == "Bannerlord.BLSE.Shared").Value?.GetCustomAttributes<AssemblyMetadataAttribute>();
            return blseMetadata?.FirstOrDefault(x => x.Key == "BLSEVersion")?.Value ?? string.Empty;
        }
        protected static string GetLauncherExVersion(CrashReportInfo crashReport)
        {
            var launcherExMetadata = crashReport.AvailableAssemblies.FirstOrDefault(x => x.Key.Name == "Bannerlord.LauncherEx").Value?.GetCustomAttributes<AssemblyMetadataAttribute>();
            return launcherExMetadata?.FirstOrDefault(x => x.Key == "LauncherExVersion")?.Value ?? string.Empty;
        }

        protected static string GetLauncherType(CrashReportInfo crashReport)
        {
            if (crashReport.AdditionalMetadata.TryGetValue("Parent_Process_Name", out var parentProcessName))
            {
                return parentProcessName switch
                {
                    "Vortex" => "vortex",
                    "BannerLordLauncher" => "bannerlordlauncher",
                    "steam" => "steam",
                    "GalaxyClient" => "gog",
                    "EpicGamesLauncher" => "epicgames",
                    "devenv" => "debuggervisualstudio",
                    "JetBrains.Debugger.Worker64c" => "debuggerjetbrains",
                    "explorer" => "explorer",
                    "NovusLauncher" => "novus",
                    "ModOrganizer" => "modorganizer",
                    _ => $"unknown launcher - {parentProcessName}"
                };
            }

            if (!string.IsNullOrEmpty(GetBUTRLoaderVersion(crashReport)))
                return "butrloader";

            return "vanilla";
        }

        protected static string GetLauncherVersion(CrashReportInfo crashReport)
        {
            if (crashReport.AdditionalMetadata.TryGetValue("Parent_Process_File_Version", out var parentProcessFileVersion))
                return parentProcessFileVersion;

            if (GetBUTRLoaderVersion(crashReport) is { } bVersion && !string.IsNullOrEmpty(bVersion))
                return bVersion;

            return "0";
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE