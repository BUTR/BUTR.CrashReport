// <auto-generated>
//   This code file has automatically been added by the "BUTR.CrashReport.Bannerlord.Source" NuGet package (https://www.nuget.org/packages/BUTR.CrashReport.Bannerlord.Source).
//   Please see https://github.com/BUTR/BUTR.CrashReport for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "BUTR.CrashReport.Bannerlord.Source" folder and the "CrashReportHtmlRenderer.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

using System.IO.Compression;

#if !BUTRCRASHREPORT_DISABLE || BUTRCRASHREPORT_ENABLE_HTML_RENDERER
#nullable enable
#if !BUTRCRASHREPORT_ENABLEWARNINGS
#pragma warning disable
#endif

namespace BUTR.CrashReport.Bannerlord
{
    using global::BUTR.CrashReport.Extensions;
    using global::BUTR.CrashReport.Models;

    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Text;

    internal static class CrashReportHtmlRenderer
    {
        private static readonly string MiniDumpTag = "<!-- MINI DUMP -->";
        private static readonly string MiniDumpButtonTag = "<!-- MINI DUMP BUTTON -->";
        private static readonly string SaveFileTag = "<!-- SAVE FILE -->";
        private static readonly string SaveFileButtonTag = "<!-- SAVE FILE BUTTON -->";
        private static readonly string ScreenshotTag = "<!-- SCREENSHOT -->";
        private static readonly string ScreenshotButtonTag = "<!-- SCREENSHOT BUTTON -->";
        private static readonly string JsonModelTag = "<!-- JSON MODEL -->";
        private static readonly string JsonModelButtonTag = "<!-- JSON MODEL BUTTON -->";

#pragma warning disable format // @formatter:off
        private static readonly string Scripts = """
<script>
    function scrollToElement(className) {
      var element = document.getElementById(className);
      
	  var iterElement = element;
	  iterElement.style.display = "block";
      while (iterElement.parentNode && iterElement.parentNode.style){
	    iterElement.parentNode.style.display = "block";
        iterElement = iterElement.parentNode;
      }
      
      element.scrollIntoView(false);
   }
   function showHideById(element, id) {
     if (document.getElementById(id).style.display === "block") {
       document.getElementById(id).style.display = "none";
       element.innerHTML = element.innerHTML.replace("-", "+");
     } else {
       document.getElementById(id).style.display = "block";
       element.innerHTML = element.innerHTML.replace("+", "-");
     }
   }
   function showHideByClassName(element, className) {
     var list = document.getElementsByClassName(className);
     for (var i = 0; i < list.length; i++) {
       list[i].style.display = element.checked ? "none" : "list-item";
     }
   }
   function setBackgroundColorByClassName(className, color) {
     var list = document.getElementsByClassName(className);
     for (var i = 0; i < list.length; i++) {
       list[i].style.backgroundColor = color;
     }
   }
   function changeFontSize(fontSize) {
     document.getElementById("exception").style.fontSize = fontSize.value;
     document.getElementById("enhanced-stacktrace").style.fontSize = fontSize.value;
     document.getElementById("involved-modules").style.fontSize = fontSize.value;
     document.getElementById("installed-modules").style.fontSize = fontSize.value;
     document.getElementById("assemblies").style.fontSize = fontSize.value;
     document.getElementById("harmony-patches").style.fontSize = fontSize.value;
   }
   function changeBackgroundColor(element) {
     document.body.style.backgroundColor = !element.checked ? "#ececec" : "white";
     setBackgroundColorByClassName("headers-container", !element.checked ? "white" : "white");
     setBackgroundColorByClassName("modules-container", !element.checked ? "#ffffe0" : "white");
     setBackgroundColorByClassName("submodules-container", !element.checked ? "#f8f8e7" : "white");
     setBackgroundColorByClassName("modules-official-container", !element.checked ? "#f4fcdc" : "white");
     setBackgroundColorByClassName("modules-external-container", !element.checked ? "#ede9e0" : "white");
     setBackgroundColorByClassName("submodules-official-container", !element.checked ? "#f0f4e4" : "white");
     setBackgroundColorByClassName("modules-invalid-container", !element.checked ? "#ffefd5" : "white");
     setBackgroundColorByClassName("submodules-invalid-container", !element.checked ? "#f5ecdf" : "white");
   }
   function minidump(element) {
     var base64 = document.getElementById("mini-dump").innerText.trim();
     //var binData = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
     var binData = new Uint8Array(
       atob(base64)
         .split("")
         .map(function (x) {
           return x.charCodeAt(0);
         })
     );
     var result = window.pako.inflate(binData);

     var a = document.createElement("a");
     var blob = new Blob([result]);
     a.href = window.URL.createObjectURL(blob);
     a.download = "crashdump.dmp";
     a.click();
   }
   function savefile(element) {
     var base64 = document.getElementById("save-file").innerText.trim();
     //var binData = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
     var binData = new Uint8Array(
       atob(base64)
         .split("")
         .map(function (x) {
           return x.charCodeAt(0);
         })
     );
     var result = window.pako.inflate(binData);

     var a = document.createElement("a");
     var blob = new Blob([result]);
     a.href = window.URL.createObjectURL(blob);
     a.download = "savefile.sav";
     a.click();
   }
   function screenshot(element) {
     var base64 = document.getElementById("screenshot-data").innerText.trim();
     document.getElementById("screenshot").src = "data:image/jpeg;charset=utf-8;base64," + base64;
     document.getElementById("screenshot").parentElement.style.display = "block";
   }
   function jsonmodel(element) {
     var base64 = document.getElementById("json-model-data").innerText.trim();
     //var binData = Uint8Array.from(atob(base64), c => c.charCodeAt(0));
     var binData = new Uint8Array(
       atob(base64)
         .split("")
         .map(function (x) {
           return x.charCodeAt(0);
         })
     );
     var result = window.pako.inflate(binData);

     var a = document.createElement("a");
     var blob = new Blob([result]);
     a.href = window.URL.createObjectURL(blob);
     a.download = "crashreport.json";
     a.click();
   }
 </script>                                    
""";
#pragma warning disable format // @formatter:on

        public static string AddData(string htmlReport, string gzipBase64CrashReportJson, string? gZipBase64MiniDump = null, string? gZipBase64SaveFile = null, string? base64Screenshot = null)
        {
            var IncludeMiniDump = !string.IsNullOrEmpty(gZipBase64MiniDump);
            var IncludeSaveFile = !string.IsNullOrEmpty(gZipBase64SaveFile);
            var IncludeScreenshot = !string.IsNullOrEmpty(base64Screenshot);

            if (IncludeMiniDump)
            {
                htmlReport = htmlReport
                    .Replace(CrashReportHtmlRenderer.MiniDumpTag, gZipBase64MiniDump)
                    .Replace(CrashReportHtmlRenderer.MiniDumpButtonTag, """

<![if !IE]>
              <br/>
              <br/>
              <button onclick='minidump(this)'>Get MiniDump</button>
<![endif]>
""");
            }

            if (IncludeSaveFile)
            {
                htmlReport = htmlReport
                    .Replace(CrashReportHtmlRenderer.SaveFileTag, gZipBase64SaveFile)
                    .Replace(CrashReportHtmlRenderer.SaveFileButtonTag, """

<![if !IE]>
              <br/>
              <br/>
              <button onclick='savefile(this)'>Get Save File</button>
<![endif]>
""");
            }

            if (IncludeScreenshot)
            {
                htmlReport = htmlReport
                    .Replace(CrashReportHtmlRenderer.ScreenshotTag, base64Screenshot)
                    .Replace(CrashReportHtmlRenderer.ScreenshotButtonTag, """

<![if !IE]>
            <br/>
            <br/>
            <button onclick='screenshot(this)'>Show Screenshot</button>
<![endif]>
""");
            }
            
            htmlReport = htmlReport
                .Replace(CrashReportHtmlRenderer.JsonModelTag, gzipBase64CrashReportJson)
                .Replace(CrashReportHtmlRenderer.JsonModelButtonTag, """

<![if !IE]>
              <br/>
              <br/>
              <button onclick='jsonmodel(this)'>Get as Json</button>
<![endif]>
""");

            return htmlReport;
        }

        public static string Build(CrashReportModel crashReportModel, IEnumerable<LogSource> files)
        {
            var runtime = crashReportModel.Metadata.Runtime;

            var launcherType = crashReportModel.Metadata.LauncherType;
            var launcherVersion = crashReportModel.Metadata.LauncherVersion;

            var butrLoaderVersion = crashReportModel.Metadata.AdditionalMetadata.FirstOrDefault(x => x.Key == "BUTRLoaderVersion")?.Value is { } butrLoaderVersionVal ? butrLoaderVersionVal : string.Empty;
            var blseVersion = crashReportModel.Metadata.AdditionalMetadata.FirstOrDefault(x => x.Key == "BLSEVersion")?.Value is { } blseVersionVal ? blseVersionVal : string.Empty;
            var launcherExVersion = crashReportModel.Metadata.AdditionalMetadata.FirstOrDefault(x => x.Key == "LauncherExVersion")?.Value is { } launcherExVersionVal ? launcherExVersionVal : string.Empty;

#pragma warning disable format // @formatter:off
            return $$"""
<html>  
  <head>
    <title>Bannerlord Crash Report</title>
    <meta charset='utf-8' />
    <game version='{{crashReportModel.GameVersion}}' />
    <launcher type='{{launcherType}}' version='{{launcherVersion}}' />
    <runtime value='{{runtime}}' />
    {{(!string.IsNullOrEmpty(butrLoaderVersion) ? $"<butrloader version='{butrLoaderVersion}' />" : string.Empty)}}
    {{(!string.IsNullOrEmpty(blseVersion) ? $"<blse version='{blseVersion}' />" : string.Empty)}}
    {{(!string.IsNullOrEmpty(launcherExVersion) ? $"<launcherex version='{launcherExVersion}' />" : string.Empty)}}
    <report id='{{crashReportModel.Id}}' version='{{crashReportModel.Version}}' />
    <style>
      .headers {
        font-family: 'Consolas', monospace;
      }
      .root-container {
        font-family: 'Consolas', monospace;
        font-size: small;

        margin: 5px;
        background-color: white;
        border: 1px solid grey;
        padding: 5px;
      }
      .headers-container {
        display: none;
      }
      .modules-container {
        margin: 5px;
        background-color: #ffffe0;
        border: 1px solid grey;
        padding: 5px;
      }
      .submodules-container {
        margin: 5px;
        border: 1px solid grey;
        background-color: #f8f8e7;
        padding: 5px;
      }
      .modules-official-container {
        margin: 5px;
        background-color: #f4fcdc;
        border: 1px solid grey;
        padding: 5px;
      }
      .modules-external-container {
        margin: 5px;
        background-color: #ede9e0;
        border: 1px solid grey;
        padding: 5px;
      }
      .submodules-official-container {
        margin: 5px;
        border: 1px solid grey;
        background-color: #f0f4e4;
        padding: 5px;
      }
      .modules-invalid-container {
        margin: 5px;
        background-color: #ffefd5;
        border: 1px solid grey;
        padding: 5px;
      }
      .submodules-invalid-container {
        margin: 5px;
        border: 1px solid grey;
        background-color: #f5ecdf;
        padding: 5px;
      }
    </style>
  </head>
  <body style='background-color: #ececec;'>
    <table style='width: 100%;'>
      <tbody>
        <tr>
          <td style='width: 80%;'>
            <div>
              <b>Bannerlord has encountered a problem and will close itself.</b>
              <br />
              This is a community Crash Report. Please save it and use it for reporting the error. Do not provide screenshots, provide the report!
              <br />
              Most likely this error was caused by a custom installed module.
              <br />
              <br />
              If you were in the middle of something, the progress might be lost.
              <br />
              <br />
              Launcher: {{launcherType}} ({{launcherVersion}})
              <br />
              Runtime: {{runtime}}
              {{(!string.IsNullOrEmpty(blseVersion) ? $"<br />BLSE Version: {blseVersion}" : string.Empty)}}
              {{(!string.IsNullOrEmpty(launcherExVersion) ? $"<br />LauncherEx Version: {launcherExVersion}" : string.Empty)}}
              <br />
            </div>
          </td>
          <td>
            <div style='float: right; margin-left: 10px;'>
              <label>Without Color:</label>
              <input type='checkbox' onclick='changeBackgroundColor(this)' />
              <br />
              <br />
              <label>Font Size:</label>
              <select class='input' onchange='changeFontSize(this);'>
                <option value='1.0em' selected='selected'>Standard</option>
                <option value='0.9em'>Medium</option>
                <option value='0.8em'>Small</option>
              </select>
              {{JsonModelButtonTag}} {{MiniDumpButtonTag}} {{SaveFileButtonTag}} {{ScreenshotButtonTag}}
            </div>
          </td>
        </tr>
      </tbody>
    </table>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "exception")'>+ Exception</a></h2>
      <div id='exception' class='headers-container'>
        {{GetRecursiveExceptionHtml(crashReportModel, crashReportModel.Exception)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "enhanced-stacktrace")'>+ Enhanced Stacktrace</a></h2>
      <div id='enhanced-stacktrace' class='headers-container'>
        {{GetEnhancedStacktraceHtml(crashReportModel)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "involved-modules")'>+ Involved Modules</a></h2>
      <div id='involved-modules' class='headers-container'>
        {{GetInvolvedModuleListHtml(crashReportModel)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "installed-modules")'>+ Installed Modules</a></h2>
      <div id='installed-modules' class='headers-container'>
        {{GetModuleListHtml(crashReportModel)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "assemblies")'>+ Assemblies</a></h2>
      <div id='assemblies' class='headers-container'>
        <label>Hide: </label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "sys_assembly")' /> System</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "gac_assembly")' /> GAC</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "tw_assembly")' /> Game</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "tw_module_assembly")' /> Game Modules</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "module_assembly")' /> Modules</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "dynamic_assembly")' /> Dynamic</label>
        <label><input type='checkbox' onclick='showHideByClassName(this, "unclas_assembly")' /> Unclassified</label>
        {{GetAssemblyListHtml(crashReportModel)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "harmony-patches")'>+ Harmony Patches</a></h2>
      <div id='harmony-patches' class='headers-container'>
        {{GetHarmonyPatchesListHtml(crashReportModel)}}
      </div>
    </div>
    <div class='root-container'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "log-files")'>+ Log Files</a></h2>
      <div id='log-files' class='headers-container'>
        {{GetLogFilesListHtml(files)}}
      </div>
    </div>
    <div class='root-container' style='display: none;'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "mini-dump")'>+ Mini Dump</a></h2>
      <div id='mini-dump' class='headers-container'>
        {{MiniDumpTag}}
      </div>
    </div>
    <div class='root-container' style='display: none;'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "save-file")'>+ Save File</a></h2>
      <div id='save-file' class='headers-container'>
        {{SaveFileTag}}
      </div>
    </div>
    <div class='root-container' style='display: none;'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "screenshot")'>+ Screenshot</a></h2>
      <img id='screenshot' alt='Screenshot' />
    </div>
    <div class='root-container' style='display: none;'>
      <h2><a href='javascript:;' class='headers' onclick='showHideById(this, "screenshot-data")'>+ Screenshot Data</a></h2>
      <div id='screenshot-data' class='headers-container'>
        {{ScreenshotTag}}
      </div>
    </div>
    <div class='root-container' style='display: none;'>
      <h2><a href='javascript:;' class="headers" onclick='showHideById(this, "json-model-data")'>+ Json Model Data</a></h2>
      <div id='json-model-data' class='headers-container'>
        {{JsonModelTag}}
      </div>
    </div>
<![if !IE]>
    <script src="https://cdn.jsdelivr.net/pako/1.0.3/pako_inflate.min.js"></script>
<![endif]>
    {{Scripts}}
  </body>
</html>
""";
#pragma warning disable format // @formatter:on
        }

        private static string GetRecursiveExceptionHtml(CrashReportModel crashReport, ExceptionModel? ex)
        {
            if (ex is null) return string.Empty;

            var callStackLines = ex.CallStack.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).Select(x => x.EscapeGenerics()).ToArray();
            var firstCallStackLine = callStackLines[0].Trim();
            var stacktrace = crashReport.EnhancedStacktrace.FirstOrDefault(x => firstCallStackLine == $"at {x.FrameDescription}");

            var moduleId = stacktrace?.ExecutingMethod.ModuleId ?? "UNKNOWN";
            var sourceModuleId = ex.SourceModuleId ?? "UNKNOWN";

            var hasMessage = !string.IsNullOrWhiteSpace(ex.Message);
            var hasCallStack = !string.IsNullOrWhiteSpace(ex.CallStack);
            var hasInner = ex.InnerException is not null;
            return new StringBuilder()
                .Append("Exception Information:").Append("<br/>")
                .AppendIf(moduleId == "UNKNOWN", sb =>  sb.Append("Potential Module Id: ").Append(moduleId).Append("<br/>"))
                .AppendIf(moduleId != "UNKNOWN", sb =>  sb.Append("Potential Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId).Append("\")'>").Append(moduleId).Append("</a></b>").Append("<br/>"))
                .AppendIf(sourceModuleId == "UNKNOWN", sb =>  sb.Append("Potential Source Module Id: ").Append(sourceModuleId).Append("<br/>"))
                .AppendIf(sourceModuleId != "UNKNOWN", sb =>  sb.Append("Potential Source Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(sourceModuleId).Append("\")'>").Append(sourceModuleId).Append("</a></b>").Append("<br/>"))
                .Append("Type: ").Append(ex.Type.EscapeGenerics()).Append("<br/>")
                .AppendIf(hasMessage, sb => sb.Append("Message: ").Append(ex.Message.EscapeGenerics()).Append("<br/>"))
                .AppendIf(hasCallStack, sb => sb.Append("Stacktrace:").Append("<br/>"))
                .AppendIf(hasCallStack, "<ol>")
                .AppendIf(hasCallStack, "<li>")
                .AppendJoinIf(hasCallStack, "</li><li>", callStackLines)
                .AppendIf(hasCallStack, "</li>")
                .AppendIf(hasCallStack, "</ol>")
                .AppendIf(hasInner, "<br/>")
                .AppendIf(hasInner, "<br/>")
                .AppendIf(hasInner, sb => sb.Append("Inner ").Append(GetRecursiveExceptionHtml(crashReport, ex.InnerException!)))
                .ToString();
        }

        private static string GetEnhancedStacktraceHtml(CrashReportModel crashReport)
        {
            var random = new Random();
            var sb = new StringBuilder();
            var sbCil = new StringBuilder();
            sb.Append("<ul>");
            foreach (var stacktrace in crashReport.EnhancedStacktrace)
            {
                var id1 = random.Next();
                var id2 = random.Next();
                var id3 = random.Next();
                var id4 = random.Next();
                var moduleId2 = stacktrace.ExecutingMethod.ModuleId ?? "UNKNOWN";
                sb.Append("<li>")
                    .Append("Frame: ").Append(stacktrace.FrameDescription.EscapeGenerics()).Append("<br/>")
                    .Append("Executing Method:")
                    .Append("<ul>")
                    .Append("<li>")
                    .AppendIf(moduleId2 == "UNKNOWN", sb =>  sb.Append("Module Id: ").Append(moduleId2).Append("<br/>"))
                    .AppendIf(moduleId2 != "UNKNOWN", sb =>  sb.Append("Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId2).Append("\")'>").Append(moduleId2).Append("</a></b>").Append("<br/>"))
                    .Append("Method: ").Append(stacktrace.ExecutingMethod.MethodFullDescription.EscapeGenerics()).Append("<br/>")
                    .Append("Method From Stackframe Issue: ").Append(stacktrace.MethodFromStackframeIssue).Append("<br/>")
                    .Append("Approximate IL Offset: ").Append(stacktrace.ILOffset is not null ? $"{stacktrace.ILOffset:X4}" : "UNKNOWN").Append("<br/>")
                    .Append("Native Offset: ").Append(stacktrace.NativeOffset is not null ? $"{stacktrace.NativeOffset:X4}" : "UNKNOWN").Append("<br/>")
                    .AppendIf(stacktrace.ExecutingMethod.ILInstructions.Count > 0, sp => sp
                        .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id1}\")'>+ IL:</a><div id='{id1}' class='headers-container'><pre>")
                        .AppendJoin(Environment.NewLine, stacktrace.ExecutingMethod.ILInstructions.Select(x => x.EscapeGenerics()))
                        .Append("</pre></div></div>"))
                    .AppendIf(stacktrace.ExecutingMethod.CSharpILMixedInstructions.Count > 0, sp => sp
                        .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id2}\")'>+ IL with C#:</a><div id='{id2}' class='headers-container'><pre>")
                        .AppendJoin(Environment.NewLine, stacktrace.ExecutingMethod.CSharpILMixedInstructions.Select(x => x.EscapeGenerics()))
                        .Append("</pre></div></div>"))
                    .AppendIf(stacktrace.ExecutingMethod.CSharpInstructions.Count > 0, sp => sp
                        .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id3}\")'>+ C#:</a><div id='{id3}' class='headers-container'><pre>")
                        .AppendJoin(Environment.NewLine, stacktrace.ExecutingMethod.CSharpInstructions.Select(x => x.EscapeGenerics()))
                        .Append("</pre></div></div>"))
                    .AppendIf(stacktrace.ExecutingMethod.NativeInstructions.Count > 0, sp => sp
                        .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id4}\")'>+ Native:</a><div id='{id4}' class='headers-container'><pre>")
                        .AppendJoin(Environment.NewLine, stacktrace.ExecutingMethod.NativeInstructions.Select(x => x.EscapeGenerics()))
                        .Append("</pre></div></div>"))
                    .Append("</li>")
                    .Append("</ul>");

                if (stacktrace.PatchMethods.Count > 0)
                {
                    sb.Append("Patch Methods:")
                        .Append("<ul>");
                    foreach (var method in stacktrace.PatchMethods)
                    {
                        var id01 = random.Next();
                        var id02 = random.Next();
                        var id03 = random.Next();
                        var moduleId = method.ModuleId ?? "UNKNOWN";
                        sb.Append("<li>")
                            .AppendIf(moduleId == "UNKNOWN", sb =>  sb.Append("Module Id: ").Append(moduleId).Append("<br/>"))
                            .AppendIf(moduleId != "UNKNOWN", sb =>  sb.Append("Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId).Append("\")'>").Append(moduleId).Append("</a></b>").Append("<br/>"))
                            .Append("Method: ").Append(method.MethodFullDescription.EscapeGenerics()).Append("<br/>")
                            .AppendIf(method.ILInstructions.Count > 0, sp => sp
                                .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id01}\")'>+ IL:</a><div id='{id01}' class='headers-container'><pre>")
                                .AppendJoin(Environment.NewLine, method.ILInstructions.Select(x => x.EscapeGenerics()))
                                .Append("</pre></div></div>"))
                            .AppendIf(method.CSharpILMixedInstructions.Count > 0, sp => sp
                                .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id02}\")'>+ IL with C#:</a><div id='{id02}' class='headers-container'><pre>")
                                .AppendJoin(Environment.NewLine, method.CSharpILMixedInstructions.Select(x => x.EscapeGenerics()))
                                .Append("</pre></div></div>"))
                            .AppendIf(method.CSharpInstructions.Count > 0, sp => sp
                                .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id03}\")'>+ C#:</a><div id='{id03}' class='headers-container'><pre>")
                                .AppendJoin(Environment.NewLine, method.CSharpInstructions.Select(x => x.EscapeGenerics()))
                                .Append("</pre></div></div>"))
                            .Append("</li>");
                    }
                    sb.Append("</ul>");
                }

                if (stacktrace.OriginalMethod is not null)
                {
                    var id01 = random.Next();
                    var id02 = random.Next();
                    var id03 = random.Next();
                    sb.Append("Original Method:")
                        .Append("<ul>")
                        .Append("<li>")
                        .AppendIf(moduleId2 == "UNKNOWN", sb =>  sb.Append("Module Id: ").Append(moduleId2).Append("<br/>"))
                        .AppendIf(moduleId2 != "UNKNOWN", sb =>  sb.Append("Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId2).Append("\")'>").Append(moduleId2).Append("</a></b>").Append("<br/>"))
                        .Append("Method: ").Append(stacktrace.OriginalMethod.MethodFullDescription.EscapeGenerics()).Append("<br/>")
                        .AppendIf(stacktrace.OriginalMethod.ILInstructions.Count > 0, sb => sb
                            .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id01}\")'>+ IL:</a><div id='{id01}' class='headers-container'><pre>")
                            .AppendJoin(Environment.NewLine, stacktrace.OriginalMethod.ILInstructions.Select(x => x.EscapeGenerics()))
                            .Append("</pre></div></div>"))
                        .AppendIf(stacktrace.OriginalMethod.CSharpILMixedInstructions.Count > 0, sb => sb
                            .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id02}\")'>+ IL with C#:</a><div id='{id02}' class='headers-container'><pre>")
                            .AppendJoin(Environment.NewLine, stacktrace.OriginalMethod.CSharpILMixedInstructions.Select(x => x.EscapeGenerics()))
                            .Append("</pre></div></div>"))
                        .AppendIf(stacktrace.OriginalMethod.CSharpInstructions.Count > 0, sb => sb
                            .Append($"<div><a href='javascript:;' class='headers' onclick='showHideById(this, \"{id03}\")'>+ C#:</a><div id='{id03}' class='headers-container'><pre>")
                            .AppendJoin(Environment.NewLine, stacktrace.OriginalMethod.CSharpInstructions.Select(x => x.EscapeGenerics()))
                            .Append("</pre></div></div>"))
                        .Append("</li>")
                        .Append("</ul>");
                }

                sb.Append("</br>");
                sb.Append("</li>");
                sbCil.Clear();
            }
            sb.Append("</ul>");
            return sb.ToString();
        }

        private static string GetInvolvedModuleListHtml(CrashReportModel crashReport)
        {
            var sb = new StringBuilder();
            sb.Append("Based on Stacktrace:")
                .Append("<ul>");
            foreach (var grouping in crashReport.EnhancedStacktrace.GroupBy(x => x.ExecutingMethod.ModuleId ?? "UNKNOWN"))
            {
                var moduleId = grouping.Key;
                if (moduleId == "UNKNOWN") continue;

                sb.Append("<li>")
                    .Append("<a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId).Append("\")'>").Append(moduleId).Append("</a>").Append("<br/>");

                foreach (var stacktrace in grouping)
                {
                    sb.Append("Method: ").Append(stacktrace.ExecutingMethod.MethodFullDescription.EscapeGenerics()).Append("<br/>")
                        .Append("Frame: ").Append(stacktrace.FrameDescription.EscapeGenerics()).Append("<br/>");

                    if (stacktrace.PatchMethods.Count > 0)
                    {
                        sb.Append("Patches:").Append("<br/>")
                            .Append("<ul>");
                        foreach (var method in stacktrace.PatchMethods)
                        {
                            // Ignore blank transpilers used to force the jitter to skip inlining
                            if (method.MethodName == "BlankTranspiler") continue;
                            var moduleId2 = method.ModuleId ?? "UNKNOWN";
                            sb.Append("<li>")
                                .AppendIf(moduleId2 == "UNKNOWN", sb =>  sb.Append("Module Id: ").Append(moduleId2).Append("<br/>"))
                                .AppendIf(moduleId2 != "UNKNOWN", sb =>  sb.Append("Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId2).Append("\")'>").Append(moduleId2).Append("</a></b>").Append("<br/>"))
                                .Append("Method: ").Append(method.MethodFullDescription.EscapeGenerics()).Append("<br/>")
                                .Append("</li>");
                        }
                        sb.Append("</ul>");
                    }

                    sb.Append("</br>");

                    sb.Append("</li>");
                }

                sb.Append("</li>");
            }
            sb.Append("</ul>");
            return sb.ToString();
        }

        private static string GetModuleListHtml(CrashReportModel crashReport)
        {
            var moduleBuilder = new StringBuilder();
            var subModulesBuilder = new StringBuilder();
            var assembliesBuilder = new StringBuilder();
            var tagsBuilder = new StringBuilder();
            var additionalAssembliesBuilder = new StringBuilder();
            var dependenciesBuilder = new StringBuilder();

            void AppendDependencies(ModuleModel module)
            {
                var deps = new Dictionary<string, string>();
                var tmp = new StringBuilder();
                foreach (var dependentModule in module.DependencyMetadatas)
                {
                    var hasVersion = !string.IsNullOrEmpty(dependentModule.Version);
                    var hasVersionRange = !string.IsNullOrEmpty(dependentModule.VersionRange);
                    if (dependentModule.Type == ModuleDependencyMetadataModelType.Incompatible)
                    {
                        deps[dependentModule.ModuleId] = tmp.Clear()
                            .Append("Incompatible ")
                            .Append("<a href='javascript:;' onclick='scrollToElement(\"").Append(dependentModule.ModuleId).Append("\")'>")
                            .Append(dependentModule.ModuleId)
                            .Append("</a>")
                            .AppendIf(dependentModule.IsOptional, " (optional)")
                            .AppendIf(hasVersion, sb => sb.Append(" >= ").Append(dependentModule.Version))
                            .AppendIf(hasVersionRange, dependentModule.VersionRange)
                            .ToString();
                    }
                    else if (dependentModule.Type == ModuleDependencyMetadataModelType.LoadAfter)
                    {
                        deps[dependentModule.ModuleId] = tmp.Clear()
                            .Append("Load ").Append("Before ")
                            .Append("<a href='javascript:;' onclick='scrollToElement(\"").Append(dependentModule.ModuleId).Append("\")'>")
                            .Append(dependentModule.ModuleId)
                            .Append("</a>")
                            .AppendIf(dependentModule.IsOptional, " (optional)")
                            .AppendIf(hasVersion, sb => sb.Append(" >= ").Append(dependentModule.Version))
                            .AppendIf(hasVersionRange, dependentModule.VersionRange)
                            .ToString();
                    }
                    else if (dependentModule.Type == ModuleDependencyMetadataModelType.LoadBefore)
                    {
                        deps[dependentModule.ModuleId] = tmp.Clear()
                            .Append("Load ").Append("After ")
                            .Append("<a href='javascript:;' onclick='scrollToElement(\"").Append(dependentModule.ModuleId).Append("\")'>")
                            .Append(dependentModule.ModuleId)
                            .Append("</a>")
                            .AppendIf(dependentModule.IsOptional, " (optional)")
                            .AppendIf(hasVersion, sb => sb.Append(" >= ").Append(dependentModule.Version))
                            .AppendIf(hasVersionRange, dependentModule.VersionRange)
                            .ToString();
                    }
                }

                dependenciesBuilder.Clear();
                foreach (var dep in deps)
                    dependenciesBuilder.Append("<li>").Append(dep.Value).Append("</li>");
            }

            void AppendSubModules(ModuleModel module)
            {
                subModulesBuilder.Clear();
                foreach (var subModule in module.SubModules)
                {
                    assembliesBuilder.Clear();
                    foreach (var metadata in subModule.AdditionalMetadata.Where(x => x.Key == "METADATA:Assembly"))
                    {
                        assembliesBuilder.Append("<li>").Append(metadata.Value).Append("</li>");
                    }

                    tagsBuilder.Clear();
                    foreach (var metadata in subModule.AdditionalMetadata.Where(x => !x.Key.StartsWith("METADATA:")))
                    {
                        tagsBuilder.Append("<li>").Append(metadata.Key).Append(": ").Append(metadata.Value).Append("</li>");
                    }

                    var hasTags = tagsBuilder.Length != 0;
                    var hasAssemblies = assembliesBuilder.Length != 0;
                    subModulesBuilder.Append("<li>")
                        .Append(module.IsOfficial ? "<div class=\"submodules-official-container\">" : "<div class=\"submodules-container\">")
                        .Append("<b>").Append(subModule.Name).Append("</b>").Append("</br>")
                        .Append("Name: ").Append(subModule.Name).Append("</br>")
                        .Append("DLLName: ").Append(subModule.AssemblyName).Append("</br>")
                        .Append("SubModuleClassType: ").Append(subModule.Entrypoint).Append("</br>")
                        .AppendIf(hasTags, sb => sb.Append("Tags:").Append("</br>"))
                        .AppendIf(hasTags, "<ul>")
                        .AppendIf(hasTags, tagsBuilder)
                        .AppendIf(hasTags, "</ul>")
                        .AppendIf(hasAssemblies, sb => sb.Append("Assemblies:").Append("</br>"))
                        .AppendIf(hasAssemblies, "<ul>")
                        .AppendIf(hasAssemblies, assembliesBuilder)
                        .AppendIf(hasAssemblies, "</ul>")
                        .Append("</div>")
                        .Append("</li>");
                }
            }

            void AppendAdditionalAssemblies(ModuleModel module)
            {
                additionalAssembliesBuilder.Clear();
                foreach (var assembly in crashReport.Assemblies.Where(y => y.ModuleId == module.Id))
                    additionalAssembliesBuilder.Append("<li>").Append(assembly.Name).Append(" (").Append(assembly.GetFullName()).Append(")").Append("</li>");
            }

            moduleBuilder.Append("<ul>");
            foreach (var module in crashReport.Modules)
            {
                AppendDependencies(module);
                AppendSubModules(module);
                AppendAdditionalAssemblies(module);

                var isVortexManaged = module.AdditionalMetadata.FirstOrDefault(x => x.Key == "METADATA:MANAGED_BY_VORTEX")?.Value is { } str && bool.TryParse(str, out var val) && val;

                var capabilities = new HashSet<ModuleCapabilities>(CrashReportShared.GetModuleCapabilities(crashReport, module));
                if (capabilities.Count == 0) capabilities.Add(ModuleCapabilities.None);

                var container = module switch
                {
                    { IsOfficial: true } => "modules-official-container",
                    { IsExternal: true } => "modules-external-container",
                    _ => "modules-container",
                };
                var hasDependencies = dependenciesBuilder.Length != 0;
                var hasUrl = !string.IsNullOrWhiteSpace(module.Url);
                var hasUpdateInfo = !string.IsNullOrWhiteSpace(module.UpdateInfo);
                var hasSubModules = subModulesBuilder.Length != 0;
                var hasAssemblies = additionalAssembliesBuilder.Length != 0;
                moduleBuilder.Append("<li>")
                    .Append("<div class='").Append(container).Append("'>")
                    .Append("<b><a href='javascript:;' onclick='showHideById(this, \"").Append(module.Id).Append("\")'>").Append("+ ").Append(module.Name).Append(" (").Append(module.Id).Append(", ").Append(module.Version).Append(")").Append("</a></b>")
                    .Append("<div id='").Append(module.Id).Append("' style='display: none'>")
                    .Append("Id: ").Append(module.Id).Append("</br>")
                    .Append("Name: ").Append(module.Name).Append("</br>")
                    .Append("Version: ").Append(module.Version).Append("</br>")
                    .Append("External: ").Append(module.IsExternal).Append("</br>")
                    .Append("Vortex: ").Append(isVortexManaged).Append("</br>")
                    .Append("Official: ").Append(module.IsOfficial).Append("</br>")
                    .Append("Singleplayer: ").Append(module.IsSingleplayer).Append("</br>")
                    .Append("Multiplayer: ").Append(module.IsMultiplayer).Append("</br>")
                    .AppendIf(hasDependencies, sb => sb.Append("Dependencies:").Append("</br>"))
                    .AppendIf(hasDependencies, "<ul>")
                    .AppendIf(hasDependencies, dependenciesBuilder)
                    .AppendIf(hasDependencies, "</ul>")
                    .Append("Capabilities:").Append("</br>")
                    .Append("<ul>")
                    .AppendIf(capabilities.Contains(ModuleCapabilities.None), sb => sb.Append("<li>").Append("None").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.OSFileSystem), sb => sb.Append("<li>").Append("OS File System").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.GameFileSystem), sb => sb.Append("<li>").Append("Game File System").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Shell), sb => sb.Append("<li>").Append("Shell").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.SaveSystem), sb => sb.Append("<li>").Append("Save System").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.GameEntities), sb => sb.Append("<li>").Append("Game Entities").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.InputSystem), sb => sb.Append("<li>").Append("Input System").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Localization), sb => sb.Append("<li>").Append("Localization System").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.UserInterface), sb => sb.Append("<li>").Append("User Interface").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Http), sb => sb.Append("<li>").Append("Http").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Achievements), sb => sb.Append("<li>").Append("Achievements").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Campaign), sb => sb.Append("<li>").Append("Campaign").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Skills), sb => sb.Append("<li>").Append("Skills").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Items), sb => sb.Append("<li>").Append("Items").Append("</li>"))
                    .AppendIf(capabilities.Contains(ModuleCapabilities.Cultures), sb => sb.Append("<li>").Append("Cultures").Append("</li>"))
                    .Append("</ul>")
                    .AppendIf(hasUrl, sb => sb.Append("Url: <a href='").Append(module.Url).Append("'>").Append(module.Url).Append("</a>").Append("</br>"))
                    .AppendIf(hasUpdateInfo, sb => sb.Append("Update Info: ").Append(module.UpdateInfo).Append("</br>"))
                    .AppendIf(hasSubModules, sb => sb.Append("SubModules:").Append("</br>"))
                    .AppendIf(hasSubModules, "<ul>")
                    .AppendIf(hasSubModules, subModulesBuilder)
                    .AppendIf(hasSubModules, "</ul>")
                    .AppendIf(hasAssemblies, sb => sb.Append("Assemblies Present:").Append("</br>"))
                    .AppendIf(hasAssemblies, "<ul>")
                    .AppendIf(hasAssemblies, additionalAssembliesBuilder)
                    .AppendIf(hasAssemblies, "</ul>")
                    .Append("</div>")
                    .Append("</div>")
                    .Append("</li>");
            }
            moduleBuilder.Append("</ul>");

            return moduleBuilder.ToString();
        }

        private static string GetAssemblyListHtml(CrashReportModel crashReport)
        {
            var sb0 = new StringBuilder();

            void AppendAssembly(AssemblyModel assembly)
            {
                var @class = string.Join(" ", assembly.Type.GetFlags().Select(x => x switch
                {
                    AssemblyModelType.Dynamic => "dynamic_assembly",
                    AssemblyModelType.GAC => "gac_assembly",
                    AssemblyModelType.System => "sys_assembly",
                    AssemblyModelType.GameCore => "tw_assembly",
                    AssemblyModelType.GameModule => "tw_module_assembly",
                    AssemblyModelType.Module => "module_assembly",
                    _ => string.Empty,
                }));
                var isDynamic = assembly.Type.HasFlag(AssemblyModelType.Dynamic);
                var hasPath = assembly.AnonymizedPath != "EMPTY" && !string.IsNullOrWhiteSpace(assembly.AnonymizedPath);
                sb0.Append("<li class='").Append(@class).Append("'>")
                    .Append(assembly.Name).Append(", ")
                    .Append(assembly.Version).Append(", ")
                    .Append(assembly.Architecture).Append(", ")
                    .AppendIf(!isDynamic, sb => sb.Append(assembly.Hash).Append(", "))
                    .AppendIf(isDynamic && !hasPath, "DYNAMIC")
                    .AppendIf(!isDynamic && !hasPath, "EMPTY")
                    .AppendIf(!isDynamic && hasPath, sb => sb.Append("<a href='javascript:;'>...").Append(Path.DirectorySeparatorChar).Append(assembly.AnonymizedPath).Append("</a>"))
                    .Append("</li>");
            }

            sb0.Append("<ul>");
            foreach (var assembly in crashReport.Assemblies)
                AppendAssembly(assembly);
            sb0.Append("</ul>");

            return sb0.ToString();
        }

        private static string GetHarmonyPatchesListHtml(CrashReportModel crashReport)
        {
            var harmonyPatchesListBuilder = new StringBuilder();
            var patchesBuilder = new StringBuilder();
            var patchBuilder = new StringBuilder();

            void AppendPatches(string name, IEnumerable<HarmonyPatchModel> patches)
            {
                patchBuilder.Clear();
                foreach (var patch in patches)
                {
                    var moduleId = crashReport.Modules.FirstOrDefault(x => crashReport.Assemblies.Where(y => y.ModuleId == x.Id).Any(y => y.Name == patch.AssemblyName))?.Id ?? "UNKNOWN";
                    var hasIndex = patch.Index != 0;
                    var hasPriority = patch.Priority != 400;
                    var hasBefore = patch.Before.Count > 0;
                    var hasAfter = patch.After.Count > 0;
                    patchBuilder.Append("<li>")
                        .AppendIf(moduleId == "UNKNOWN", sb =>  sb.Append("Module Id: ").Append(moduleId).Append("; "))
                        .AppendIf(moduleId != "UNKNOWN", sb =>  sb.Append("Module Id: ").Append("<b><a href='javascript:;' onclick='scrollToElement(\"").Append(moduleId).Append("\")'>").Append(moduleId).Append("</a></b>").Append("; "))
                        .Append("Owner: ").Append(patch.Owner).Append("; ")
                        .Append("Namespace: ").Append(patch.Namespace).Append("; ")
                        .AppendIf(hasIndex, sb => sb.Append("Index: ").Append(patch.Index).Append("; "))
                        .AppendIf(hasPriority, sb => sb.Append("Priority: ").Append(patch.Priority).Append("; "))
                        .AppendIf(hasBefore, sb => sb.Append("Before: ").AppendJoin(", ", patch.Before).Append("; "))
                        .AppendIf(hasAfter, sb => sb.Append("After: ").AppendJoin(", ", patch.After).Append(";"))
                        .Append("</li>");
                }

                if (patchBuilder.Length > 0)
                {
                    patchesBuilder.Append("<li>").Append(name).Append("<ul>").Append(patchBuilder.ToString()).Append("</ul>").Append("</li>");
                }
            }

            harmonyPatchesListBuilder.Append("<ul>");
            foreach (var harmonyPatch in crashReport.HarmonyPatches)
            {
                patchesBuilder.Clear();

                AppendPatches("Prefixes", harmonyPatch.Patches.Where(x => x.Type == HarmonyPatchModelType.Prefix));
                AppendPatches("Postfixes", harmonyPatch.Patches.Where(x => x.Type == HarmonyPatchModelType.Postfix));
                AppendPatches("Finalizers", harmonyPatch.Patches.Where(x => x.Type == HarmonyPatchModelType.Finalizer));
                AppendPatches("Transpilers", harmonyPatch.Patches.Where(x => x.Type == HarmonyPatchModelType.Transpiler));

                if (patchesBuilder.Length > 0)
                {
                    var methodNameFull = !string.IsNullOrEmpty(harmonyPatch.OriginalMethodDeclaredTypeName)
                        ? $"{harmonyPatch.OriginalMethodDeclaredTypeName}.{harmonyPatch.OriginalMethodName}"
                        : harmonyPatch.OriginalMethodName;
                    harmonyPatchesListBuilder.Append("<li>")
                        .Append(methodNameFull).Append("<ul>").Append(patchesBuilder.ToString()).Append("</ul>")
                        .Append("</li>")
                        .Append("<br/>");
                }
            }
            harmonyPatchesListBuilder.Append("</ul>");

            return harmonyPatchesListBuilder.ToString();
        }

        private static string GetLogFilesListHtml(IEnumerable<LogSource> files)
        {
            var sb = new StringBuilder();

            sb.Append("<ul>");
            foreach (var logSource in files)
            {
                if (logSource.Logs.Count == 0) continue;

                sb.Append("<li>").Append("<a>").Append(logSource.Name).Append("</a>").Append("<pre>");
                var sbSource = new StringBuilder();
                var longestType = logSource.Logs.Max(x => x.Type.Length);
                foreach (var logEntry in logSource.Logs)
                {
                    var toAppend = (longestType - logEntry.Type.Length) + 1;
                    var style = logEntry.Level == "ERR" ? "color:red" : logEntry.Level == "WRN" ? "color:orange" : "";
                    sb.Append(logEntry.Date.ToString("u")).Append(" [").Append(logEntry.Type).Append(']').Append(' ', toAppend).Append('[').Append("<span style ='").Append(style).Append("'>").Append(logEntry.Level).Append("</span>").Append("]: ").Append(logEntry.Message).AppendLine();
                }
                sb.Append("</pre>").Append("</ul></li>");
            }
            sb.Append("</ul>");
            return sb.ToString();
        }
    }
}

#pragma warning restore
#nullable restore
#endif // BUTRCRASHREPORT_DISABLE